image: theshadowx/qt5

stages:
  - build
  - deploy

linux:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  # before_script: 
  #   - apt update && apt -y install make autoconf 
  script: 
    - qmake -config release
    - make
    - ls
  artifacts:
    paths:
      - Lappbill
  cache:
    paths:
      - "*.o"
      - "moc_*.*"
      - "ui_*.h"

windowsBuild:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  # before_script: 
  #   - apt update && apt -y install make autoconf 
  script: 
    - ./cross-compile-to-windows.sh
  artifacts:
    paths:
      - ./release/
  cache:
    paths:
      - "*.o"
      - "moc_*.*"
      - "ui_*.h"
      - "mxe/"

# run tests using the binary built before
#test:
#  stage: test
#  script:
#    - echo "None"

ubuntu:
  stage: deploy
  before_script:
    - apt update && apt -y install dh-make
  script:
    - cd ..
    - mv Lappbill lappbill-$CI_COMMIT_TAG
    - cd lappbill-$CI_COMMIT_TAG
    - qmake -config release
    - dh_make -s -e marku@jylhis.com --createorig -y
    - dpkg-buildpackage
    - ls
  only:
    - tags

windows:
  stage: deploy
  image: msrd0/win-cross-qt5
  script:
    - i686-w64-mingw32-qmake-qt5 -config release
    - make
    - ls
  only:
    - tags